//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/CarController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarController"",
    ""maps"": [
        {
            ""name"": ""MouvementVoiture"",
            ""id"": ""4ad6c44c-a7ec-4769-822d-2072219c7a37"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""Value"",
                    ""id"": ""faeb531f-3278-4e4d-8e78-5c27656a1149"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""5782e28d-0f7a-44d0-b768-f8031c22da91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0a453871-283b-45a6-b066-3dccfe87512f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d0e63df9-77c4-4662-b4c0-02b6abd82e1e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ebb1d2f8-d230-41b8-b17f-6148208e7594"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bdefa300-c98b-4983-936e-4f096c9742d8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ba7a210-72c0-4337-be03-417f69a0fb1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dac1387b-75ae-46aa-97b1-ae63c40e58c2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouvementVoiture
        m_MouvementVoiture = asset.FindActionMap("MouvementVoiture", throwIfNotFound: true);
        m_MouvementVoiture_Mouvement = m_MouvementVoiture.FindAction("Mouvement", throwIfNotFound: true);
        m_MouvementVoiture_Brake = m_MouvementVoiture.FindAction("Brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouvementVoiture
    private readonly InputActionMap m_MouvementVoiture;
    private List<IMouvementVoitureActions> m_MouvementVoitureActionsCallbackInterfaces = new List<IMouvementVoitureActions>();
    private readonly InputAction m_MouvementVoiture_Mouvement;
    private readonly InputAction m_MouvementVoiture_Brake;
    public struct MouvementVoitureActions
    {
        private @CarController m_Wrapper;
        public MouvementVoitureActions(@CarController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_MouvementVoiture_Mouvement;
        public InputAction @Brake => m_Wrapper.m_MouvementVoiture_Brake;
        public InputActionMap Get() { return m_Wrapper.m_MouvementVoiture; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouvementVoitureActions set) { return set.Get(); }
        public void AddCallbacks(IMouvementVoitureActions instance)
        {
            if (instance == null || m_Wrapper.m_MouvementVoitureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouvementVoitureActionsCallbackInterfaces.Add(instance);
            @Mouvement.started += instance.OnMouvement;
            @Mouvement.performed += instance.OnMouvement;
            @Mouvement.canceled += instance.OnMouvement;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(IMouvementVoitureActions instance)
        {
            @Mouvement.started -= instance.OnMouvement;
            @Mouvement.performed -= instance.OnMouvement;
            @Mouvement.canceled -= instance.OnMouvement;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(IMouvementVoitureActions instance)
        {
            if (m_Wrapper.m_MouvementVoitureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouvementVoitureActions instance)
        {
            foreach (var item in m_Wrapper.m_MouvementVoitureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouvementVoitureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouvementVoitureActions @MouvementVoiture => new MouvementVoitureActions(this);
    public interface IMouvementVoitureActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
}
